# app/api/quiz_api.py (Optional FastAPI endpoints)
from fastapi import APIRouter, HTTPException
from app.quiz.service import QuizService
from app.quiz.models import QuizRequest, QuizEvaluationRequest

router = APIRouter(prefix="/api/quiz", tags=["quiz"])
quiz_service = QuizService()

@router.post("/generate")
async def generate_quiz(request: QuizRequest):
    """Generate quiz from PDF file."""
    try:
        quiz = quiz_service.generate_quiz(request)
        return {"quiz": quiz, "count": len(quiz)}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/evaluate")
async def evaluate_quiz(request: QuizEvaluationRequest):
    """Evaluate quiz answers."""
    try:
        results = quiz_service.evaluate_quiz(request)
        
        # Calculate summary statistics
        total_score = sum(r.score for r in results)
        avg_score = total_score / len(results) if results else 0
        correct_count = sum(1 for r in results if r.is_correct)
        
        return {
            "results": results,
            "summary": {
                "total_questions": len(results),
                "correct_answers": correct_count,
                "average_score": avg_score,
                "percentage": (correct_count / len(results) * 100) if results else 0
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Example usage script
if __name__ == "__main__":
    # Initialize service
    quiz_service = QuizService()
    
    # Example 1: Generate quiz
    quiz_request = QuizRequest(
        file_path="/path/to/mental_health_paper.pdf",  # or URL
        num_questions=5,
        question_types=["mcq", "descriptive"],
        difficulty="medium"
    )
    
    try:
        quiz = quiz_service.generate_quiz(quiz_request)
        print("Generated Quiz:")
        for i, q in enumerate(quiz, 1):
            print(f"{i}. {q.question}")
            print(f"   Type: {q.type}")
            if q.options:
                for j, option in enumerate(q.options, 1):
                    print(f"   {j}. {option}")
            print()
        
        # Example 2: Evaluate quiz
        sample_answers = [
            "Option 1",  # For MCQ
            "This is a descriptive answer about mental health assessment...",  # For descriptive
            "Option 3",
            "Another descriptive answer...",
            "Option 2"
        ]
        
        eval_request = QuizEvaluationRequest(
            quiz=quiz,
            answers=sample_answers[:len(quiz)],
            file_path=quiz_request.file_path
        )
        
        results = quiz_service.evaluate_quiz(eval_request)
        print("Evaluation Results:")
        for result in results:
            print(f"Q: {result.question}")
            print(f"Your Answer: {result.user_answer}")
            print(f"Correct: {result.is_correct}")
            print(f"Score: {result.score}")
            print(f"Explanation: {result.explanation}")
            print("-" * 50)
            
    except Exception as e:
        print(f"Error: {e}")