from app.dto import ChatRequest, ChatResponse
from google import genai
from app.config.settings import settings
from google.genai import types

SYSTEM_PROMPTS = {
    "therapist": """You are a compassionate mental health advisor chatbot. Your role is to:
    1. Provide supportive, empathetic responses
    2. Suggest coping strategies and breathing exercises
    3. Recommend when to seek professional help
    4. Never diagnose or provide medical advice
    5. Keep conversations supportive and non-judgmental
    6. Remember context from previous messages in this session
    
    Always end responses with gentle encouragement and ask how the user feels about the suggestions.""",
    
    "recommender": """You are a mental health recommendation system. Based on user data including:
    - Current mood and emotional state
    - Recent activities and patterns
    - Chat conversation context
    - Sleep and stress levels
    
    Provide personalized recommendations for:
    - Mindfulness exercises
    - Physical activities
    - Relaxation techniques
    - When to consider professional support
    
    Keep recommendations practical and achievable."""
}

class ChatService:
    def __init__(self):
        self.client = genai.Client(api_key=settings.GEMINI_API_KEY)
        self.model = "gemini-2.5-flash"
        
        
    def configure(self, 
                  system_instruction: str | None = None, 
                  thinking_budget: int = 0):
        if system_instruction is not None:
            return types.GenerateContentConfig(
                system_instruction=system_instruction,
                thinking_config=types.ThinkingConfig(thinking_budget=thinking_budget) 
            )
        else:
            return types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(thinking_budget=0) 
            )
            
    def generate_chat_response(self, request: ChatRequest) -> ChatResponse:
        config = self.configure(
            system_instruction=request.system_instruction,
            thinking_budget=0
        )
        
        response = self.client.models.generate_content(
            model=self.model,
            contents=request.prompt,
            config=config,
        )
        return ChatResponse(res=response.text)

from google import genai
from app.config import settings

class EmbeddingsService:
    def __init__(self):
        self.client = genai.Client(api_key=settings.GEMINI_API_KEY)
        self.model = "gemini-embedding-001"

    def generate_embedding(self, text: str) -> list:
        response = self.client.embeddings.create(
            model=self.model,
            input=text
        )
        [embedding] = response.embeddings
        return embedding.values